{"version":3,"file":"filepicker.min.js","sources":["../src/filepicker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AMD wrapper for the Moodle filepicker, based on Atto YUI module moodle-editor_atto-editor.\n *\n * @module      editor_marklar/filepicker\n * @copyright   2016 David Mudrak <david@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/yui'], function(Y) {\n\n    \"use strict\";\n\n    /**\n     * @constructor\n     * @param {array} options List of filepicker options\n     */\n    function EditorFilepicker(options) {\n        this.options = options;\n    }\n\n    /**\n     * Should we show the filepicker for the given type of content?\n     *\n     * @method canShowFilepicker\n     * @param {string} type The content type for the file picker: image, link, media\n     * @return {boolean}\n     */\n    EditorFilepicker.prototype.canShowFilepicker = function(type) {\n        return (this.options && (typeof this.options[type] !== 'undefined'));\n    };\n\n    /**\n     * Show the filepicker.\n     *\n     * This depends on core_filepicker, and then calls that module's show function.\n     *\n     * @method showFilepicker\n     * @param {string} type The media type for the file picker.\n     * @param {function} callback The callback to use when selecting an item of media.\n     * @param {object} [context] The context from which to call the callback.\n     */\n    EditorFilepicker.prototype.showFilepicker = function(type, callback, context) {\n        var self = this;\n        Y.use('core_filepicker', function(Y) {\n            var options = Y.clone(self.options[type], true);\n            options.formcallback = callback;\n            if (context) {\n                options.magicscope = context;\n            }\n\n            M.core_filepicker.show(Y, options);\n        });\n    };\n\n    return /** @alias module:editor_marklar/filepicker */ {\n        init: function(options) {\n            return new EditorFilepicker(options);\n        }\n    };\n});\n"],"names":["define","Y","EditorFilepicker","options","this","prototype","canShowFilepicker","type","showFilepicker","callback","context","self","use","clone","formcallback","magicscope","M","core_filepicker","show","init"],"mappings":";;;;;;;AAsBAA,mCAAO,CAAC,aAAa,SAASC,GAQ1B,SAASC,iBAAiBC,SACtBC,KAAKD,QAAUA,OACnB,CAoCA,OA3BAD,iBAAiBG,UAAUC,kBAAoB,SAASC,MACpD,OAAQH,KAAKD,cAA0C,IAAvBC,KAAKD,QAAQI,OAajDL,iBAAiBG,UAAUG,eAAiB,SAASD,KAAME,SAAUC,SACjE,IAAIC,KAAOP,KACXH,EAAEW,IAAI,mBAAmB,SAASX,GAC9B,IAAIE,QAAUF,EAAEY,MAAMF,KAAKR,QAAQI,OAAO,GAC1CJ,QAAQW,aAAeL,SACnBC,UACAP,QAAQY,WAAaL,SAGzBM,EAAEC,gBAAgBC,KAAKjB,EAAGE,QAC9B,KAGkD,CAClDgB,KAAM,SAAShB,SACX,OAAO,IAAID,iBAAiBC,QAChC,EAER"}