{"version":3,"file":"imagepaster.min.js","sources":["../src/imagepaster.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allows images to be pasted into textarea editor field.\n *\n * @module      editor_marklar/imagepaster\n * @copyright   2018 David Mudr√°k <david@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/config'], function($, Log, Config) {\n\n    \"use strict\";\n\n    /**\n     * Prepare a new image paster instance.\n     *\n     * @constructor\n     * @param {jQuery} textarea - Editor's textarea element.\n     * @param {Object} imagepickeroptions - Filepicker component used for uploading.\n     * @param {function(Object)} callback - Function to run when the pasted image has been uploaded.\n     */\n    function ImagePaster(textarea, imagepickeroptions, callback) {\n        var self = this;\n\n        self.textarea = textarea;\n        self.imagepickeroptions = imagepickeroptions;\n        self.callback = callback;\n\n        self.initPasteListener();\n    }\n\n    /**\n     * Register a handler listening to the paste event in the textarea.\n     */\n    ImagePaster.prototype.initPasteListener = function() {\n        var self = this;\n\n        self.textarea.on('paste', function(e) {\n            var items = e.originalEvent.clipboardData.items;\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (item.type.indexOf('image/') === 0) {\n                    self.uploadImage(item.getAsFile());\n                }\n            }\n        });\n    };\n\n    /**\n     * Upload the pasted file to Moodle.\n     *\n     * @param {File} file - Pasted file.\n     */\n    ImagePaster.prototype.uploadImage = function(file) {\n        var self = this;\n\n        var filename = (Math.random() * 1000).toString().replace('.', '') + '_' + file.name;\n        var repositorykeys = window.Object.keys(self.imagepickeroptions.repositories);\n        var formdata = new window.FormData();\n        var uploadrepofound = false;\n\n        for (var i = 0; i < repositorykeys.length; i++) {\n            if (self.imagepickeroptions.repositories[repositorykeys[i]].type === 'upload') {\n                formdata.append('repo_id', self.imagepickeroptions.repositories[repositorykeys[i]].id);\n                uploadrepofound = true;\n                break;\n            }\n        }\n\n        if (!uploadrepofound) {\n            return;\n        }\n\n        formdata.append('repo_upload_file', file, filename);\n        formdata.append('itemid', self.imagepickeroptions.itemid);\n        formdata.append('author', self.imagepickeroptions.author);\n        formdata.append('env', self.imagepickeroptions.env);\n        formdata.append('sesskey', Config.sesskey);\n        formdata.append('client_id', self.imagepickeroptions.client_id);\n\n        if (self.imagepickeroptions.context.id) {\n            formdata.append('ctx_id', self.imagepickeroptions.context.id);\n        }\n\n        $.ajax(Config.wwwroot + '/repository/repository_ajax.php?action=upload', {\n            type: 'POST',\n            data: formdata,\n            dataType: 'json',\n            processData: false,\n            contentType: false,\n            async: true\n        }).done(function(res) {\n            if ('error' in res) {\n                Log.error('imagepaster: error uploading image: ' + res.errorcode + ': ' + res.error);\n            } else {\n                self.callback(res);\n            }\n        }).fail(function(error) {\n            Log.error('imagepaster: error uploading image: ' + error.status + ' ' + error.statusText);\n        });\n    };\n\n    return {\n        /**\n         * Initialize the image paster module.\n         *\n         * The callback will be run when the file is sucessfully uploaded. It will\n         * be given the object returned by repository_upload::process_upload():\n         *  - url: draftfile URL of the uploaded file\n         *  - id: itemid of the uploaded file\n         *  - file: name of the uploaded file\n         *\n         * @method\n         * @param {jQuery|Element|string} textareaorid - Editor's textarea element or its id.\n         * @param {Object} imagepickeroptions - Filepicker component used for uploading.\n         * @param {function(Object)} callback - Function to run when the pasted image has been uploaded.\n         * @returns {ImagePaster|bool} - ImagePaster instance or false on error.\n         */\n        init: function(textareaorid, imagepickeroptions, callback) {\n\n            var textarea;\n\n            if (typeof textareaorid === 'string') {\n                textarea = $(document.getElementById(textareaorid));\n\n            } else {\n                textarea = $(textareaorid);\n            }\n\n            if (!textarea.length) {\n                Log.error('imagepaster: invalid editor textarea element');\n                return false;\n            }\n\n            if (!imagepickeroptions) {\n                Log.error('imagepaster: invalid image picker options');\n                return false;\n            }\n\n            if (!callback || typeof callback != 'function') {\n                Log.error('imagepaster: invalid callback specified');\n                return false;\n            }\n\n            return new ImagePaster(textarea, imagepickeroptions, callback);\n        }\n    };\n});\n"],"names":["define","$","Log","Config","ImagePaster","textarea","imagepickeroptions","callback","this","initPasteListener","prototype","self","on","e","items","originalEvent","clipboardData","i","length","item","type","indexOf","uploadImage","getAsFile","file","filename","Math","random","toString","replace","name","repositorykeys","window","Object","keys","repositories","formdata","FormData","uploadrepofound","append","id","itemid","author","env","sesskey","client_id","context","ajax","wwwroot","data","dataType","processData","contentType","async","done","res","error","errorcode","fail","status","statusText","init","textareaorid","document","getElementById"],"mappings":";;;;;;;AAsBAA,OAAO,6BAAA,CAAC,SAAU,WAAY,gBAAgB,SAASC,EAAGC,IAAKC,QAY3D,SAASC,YAAYC,SAAUC,mBAAoBC,UACpCC,KAENH,SAAWA,SAFLG,KAGNF,mBAAqBA,mBAHfE,KAIND,SAAWA,SAJLC,KAMNC,mBACT,CAyEA,OApEAL,YAAYM,UAAUD,kBAAoB,WACtC,IAAIE,KAAOH,KAEXG,KAAKN,SAASO,GAAG,SAAS,SAASC,GAE/B,IADA,IAAIC,MAAQD,EAAEE,cAAcC,cAAcF,MACjCG,EAAI,EAAGA,EAAIH,MAAMI,OAAQD,IAAK,CACnC,IAAIE,KAAOL,MAAMG,GACmB,IAAhCE,KAAKC,KAAKC,QAAQ,WAClBV,KAAKW,YAAYH,KAAKI,YAE9B,CACJ,KAQJnB,YAAYM,UAAUY,YAAc,SAASE,MAQzC,IAPA,IAAIb,KAAOH,KAEPiB,UAA4B,IAAhBC,KAAKC,UAAiBC,WAAWC,QAAQ,IAAK,IAAM,IAAML,KAAKM,KAC3EC,eAAiBC,OAAOC,OAAOC,KAAKvB,KAAKL,mBAAmB6B,cAC5DC,SAAW,IAAIJ,OAAOK,SACtBC,iBAAkB,EAEbrB,EAAI,EAAGA,EAAIc,eAAeb,OAAQD,IACvC,GAAqE,WAAjEN,KAAKL,mBAAmB6B,aAAaJ,eAAed,IAAIG,KAAmB,CAC3EgB,SAASG,OAAO,UAAW5B,KAAKL,mBAAmB6B,aAAaJ,eAAed,IAAIuB,IACnFF,iBAAkB,EAClB,KACJ,CAGCA,kBAILF,SAASG,OAAO,mBAAoBf,KAAMC,UAC1CW,SAASG,OAAO,SAAU5B,KAAKL,mBAAmBmC,QAClDL,SAASG,OAAO,SAAU5B,KAAKL,mBAAmBoC,QAClDN,SAASG,OAAO,MAAO5B,KAAKL,mBAAmBqC,KAC/CP,SAASG,OAAO,UAAWpC,OAAOyC,SAClCR,SAASG,OAAO,YAAa5B,KAAKL,mBAAmBuC,WAEjDlC,KAAKL,mBAAmBwC,QAAQN,IAChCJ,SAASG,OAAO,SAAU5B,KAAKL,mBAAmBwC,QAAQN,IAG9DvC,EAAE8C,KAAK5C,OAAO6C,QAAU,gDAAiD,CACrE5B,KAAM,OACN6B,KAAMb,SACNc,SAAU,OACVC,aAAa,EACbC,aAAa,EACbC,OAAO,IACRC,MAAK,SAASC,KACT,UAAWA,IACXrD,IAAIsD,MAAM,uCAAyCD,IAAIE,UAAY,KAAOF,IAAIC,OAE9E7C,KAAKJ,SAASgD,IAEtB,IAAGG,MAAK,SAASF,OACbtD,IAAIsD,MAAM,uCAAyCA,MAAMG,OAAS,IAAMH,MAAMI,WAClF,MAGG,CAgBHC,KAAM,SAASC,aAAcxD,mBAAoBC,UAE7C,IAAIF,SASJ,OANIA,SAAWJ,EADa,iBAAjB6D,aACMC,SAASC,eAAeF,cAGxBA,eAGH5C,OAKTZ,mBAKAC,UAA+B,mBAAZA,SAKjB,IAAIH,YAAYC,SAAUC,mBAAoBC,WAJjDL,IAAIsD,MAAM,4CACH,IANPtD,IAAIsD,MAAM,8CACH,IANPtD,IAAIsD,MAAM,iDACH,EAcf,EAER"}